** - означает, что скрипт инициализируется в блоках vue отдельно.

1. Имитация печати текста на клавиатуре - typing-text.js**:
    1) для добавления имитации нужно создать блок с data-typing-text="text";
    2) если планируется, чтобы текст перепечатывался каждый раз, когда он после ухода из видимости окна возвращается в него, нужно добавить     блоку класс 'typing-text--repeat';
    3) скорость по умолчанию = 100 ms, можно поменять её в атрибуте data-typing-speed="x", где x - число, отражающее милисекунды.

2. Отслеживание нахождения в видимости окна браузера**:
    1) чтобы отслеживать нахождение элемента в области видимости окна браузера, нужно блоку добавить [data-scroll-visibility];
    2) функция при прокрутке экрана отслеживает, находится ли блок в видимости экрана: если да - добавляет ему '.inside-window' и убирает '.outside-window', если нет - убирает '.inside-window' и добавляет '.outside-window'.

3. Контейнеры видео**: 
    1) для создания видео с плеером нужно поместить тег video в блок .video-container. Все элементы управления будут созданы автоматически.
    2) возможности (экземпляр класса указанных методов - videoMethods):
        1) воспроизвести/остановить видео - инициализируется в методе initPlayingToggle(), возможно также обратиться напрямую к методам play() и    pause() \\ действия для вызова: 
            1) нажатие на видео.
        2) прогресс воспроизведения (видеодорожка): инициализируется в методе initVideotrack(), инициализирующем как отображение прогресса, так     и возможность перемотки \\ действия:
            1) перемотка - нажатие на область видеодорожки;
            2) перемещение ползунка видеодорожки по ней.
        3) расширить видео (поместить его в pop-up) - инициализируется в методе initExpandBtn() \\ действия для вызова:
            1) двойное нажатие на видео (если event.target != элементам управления);
            2) нажатие на кнопку '.video-container__expand'.
        4) отображение текущего прогресса в формате минуты:секунды: инициализируется в методе initTimestamp().
        5) скрывание/показывание элементов управления во время воспроизведения - иницализируется в методе toggleControlsOnHover(). По функционалу является аналогом &:hover, но сделан отдельным методом для корректной работы с тачскрином \\ действия:
            1) при управлении мышью, наведение курсора на '.video-container' добавит класс '__hover', при уходе курсора - уберет этот класс;
            2) при управлении тач-скрином, нажатие на '.video-container' добавит класс '__hover', который будет убран автоматически через   некоторый интервал в секундах;
            3) '.__hover' - показывает элементы управления при воспроизводящемся видео, при этом, видео, которое не воспроизводится, показывает элементы управления и без класса '.__hover'.
    
4. Контейнеры изображений**:
    1) для присваивания изображению установленного функционала, нужно поместить тег img в '.image-container'.
    2) возможности (экземлпяр класса указаных методов - imageMethods):
        1) расширить изображение (поместить его в pop-up) - инициализируется в методе initExpandBtn(). \\ действия:
            1) при наведении на изображение мышью - показывается иконка '.image-container__expand'.
            2) при нажатии на изображение, оно помещается в popup.

5. Всплывающее уведомление (pop-up):
    1) для создания нужно инициализировать новый экземлпяр класса Popup, с объектом в аргументе, шаблон объекта хранится в js/snippets/popup.js;
    2) возможно добавить заголовок для уведомления или вызывать без него, поместить в "тело" текст (указав строку) или список (указав массив;
    3) уведомлений может быть несколько на странице - самое нижнее из них имеет класс '.popup--colored', отвечающий за темный фон;
    4) возможности:
            1) убрать уведомление, нажав на темную область вне него.

6. Навигационные кнопки**: 
    1) инициализация скрипта происходит в экземлпяере класса Header - headerMethods;
    2) кнопка должна быть тегом 'a' с атрибутом 'href', значение которого имеет формат '#id'. Пример: <a href="#about-block">Кнопка</a>.

7. Slider Swiper:
    1) версия: 8.0.7.

8. Слайдер-книжка (Book Slider):
    1)  при событии update() изображение теней по краям слайдера, появляющееся при "переворачивании страницы", заменяется на изображение книги, дабы сделать эффект переворачивания страницы более правдоподобным;
    2) при событии touchStart() проверяется, были ли задеты курсором/касанием "оглавление" странциы или изображение/видео на ней. Если да, то страница не будет переворачиваться, т.е. чтобы перевернуть страницу (слайд), нужно проводить по пустой области страницы;
    3) при событии slideChange() останавливается воспроизведение видео;
    4) функция bookSliderFix реализует:
        1) moveBook() - возможность передвинуть книгу стрелками вправо-влево (активируется, если книга не помещается на страницу)
        2) pageCount() - подсчет и вывод номеров страниц в книгу;
        3) update() - обновление слайдера при DOM-мутациях (например, вызванных вследствие добавления слайдов посредством Vue).

9. Приложения Vue (общие моменты):
    1) версия: 3.2.26
    2) приложение работает за счет данных, полученных из js/JSON/[name].json.
    3) на жизненном цикле mounted() данные загружаются и, по необходимости, изменяется их структура (например: добавляются новые ключи к объектам, меняется порядок объектов и др.)
    4) на этом же жизненном цикле иницализируются скрипты, имеющие **.

10. Если понадобится ввести новые фильтры, обратиться к файлу js/snippets/filters.js